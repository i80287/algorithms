#include <algorithm>
#include <array>
#include <cassert>
#include <cinttypes>
#include <cstdint>
#include <cstdio>
#include <ctime>
// NOLINTNEXTLINE(misc-include-cleaner)
#include <functional>
#include <limits>
#include <random>
#include <stdexcept>
#include <string>

#include "../misc/config_macros.hpp"
#include "../misc/tests/test_tools.hpp"
#include "integers_128_bit.hpp"
#include "is_prime.hpp"

#if CONFIG_HAS_INCLUDE(<gmp.h>) && !defined(__APPLE__)
#include <gmp.h>
#define HAS_GMP_DURING_TESTING
#elif defined(__linux__) && !defined(__MINGW32__)
#error gmp tests should be available on linux
#endif

// clang-format off
// NOLINTBEGIN(cert-dcl03-c, misc-static-assert, hicpp-static-assert, cppcoreguidelines-avoid-magic-numbers)
// clang-format on

namespace {

// NOLINTNEXTLINE(google-build-using-namespace)
using namespace test_tools;
using math_functions::is_prime_bpsw;
using std::size_t;
using std::uint16_t;
using std::uint32_t;
using std::uint64_t;

void TestSmallPrimes() noexcept {
    log_tests_started();

    for (uint32_t n = 0; n < std::numeric_limits<uint16_t>::max(); n++) {
        const bool is_prime = is_prime_bpsw(uint64_t{n});
        assert(is_prime == math_functions::is_prime_u16(static_cast<uint16_t>(n)));
        assert(is_prime == math_functions::is_prime_sqrt(uint32_t{n}));
        assert(is_prime == math_functions::is_prime_sqrt(uint64_t{n}));
        assert(is_prime == math_functions::is_prime_sqrt(uint128_t{n}));
    }
}

void TestMidPrimes() noexcept {
    log_tests_started();

    constexpr std::array<uint64_t, 40> primes = {
        1000000000000000009ULL, 1000000000000000003ULL, 999999999999999989ULL,
        999999999999999967ULL,  999999999999999877ULL,  999999999999999863ULL,
        999999999999999829ULL,  999999999999999749ULL,  999999999999999737ULL,
        999999999999999709ULL,  999999999999999637ULL,  999999999999999631ULL,
        999999999999999613ULL,  999999999999999601ULL,  999999999999999569ULL,
        999999999999999539ULL,  999999999999999529ULL,  999999999999999503ULL,
        999999999999999487ULL,  999999999999999463ULL,  999999999999999443ULL,
        999999999999999419ULL,  999999999999999409ULL,  999999999999999371ULL,
        999999999999999359ULL,  999999999999999331ULL,  999999999999999283ULL,
        999999999999999161ULL,  999999999999999157ULL,  999999999999999121ULL,
        999999999999999079ULL,  999999999999999073ULL,  999999999999999023ULL,
        999999999999998989ULL,  999999999999998939ULL,  999999999999998929ULL,
        999999999999998927ULL,  999999999999998867ULL,  999999999999998759ULL,
        999999999999998743ULL,
    };
#if CONFIG_HAS_AT_LEAST_CXX_20
    static_assert(std::is_sorted(primes.begin(), primes.end(), std::greater<>{}));
#endif
    static_assert(primes.front() < primes.front() + 2);
    for (uint64_t n = primes.back(); n <= primes.front(); n += 2) {
        assert(is_prime_bpsw(n) ==
               std::binary_search(primes.begin(), primes.end(), n, std::greater<>{}));
    }
}

void TestLargestU64Primes() noexcept {
    log_tests_started();

    constexpr std::array<uint64_t, 795> primes = {
        18446744073709551557ULL, 18446744073709551533ULL, 18446744073709551521ULL,
        18446744073709551437ULL, 18446744073709551427ULL, 18446744073709551359ULL,
        18446744073709551337ULL, 18446744073709551293ULL, 18446744073709551263ULL,
        18446744073709551253ULL, 18446744073709551191ULL, 18446744073709551163ULL,
        18446744073709551113ULL, 18446744073709550873ULL, 18446744073709550791ULL,
        18446744073709550773ULL, 18446744073709550771ULL, 18446744073709550719ULL,
        18446744073709550717ULL, 18446744073709550681ULL, 18446744073709550671ULL,
        18446744073709550593ULL, 18446744073709550591ULL, 18446744073709550539ULL,
        18446744073709550537ULL, 18446744073709550381ULL, 18446744073709550341ULL,
        18446744073709550293ULL, 18446744073709550237ULL, 18446744073709550147ULL,
        18446744073709550141ULL, 18446744073709550129ULL, 18446744073709550111ULL,
        18446744073709550099ULL, 18446744073709550047ULL, 18446744073709550033ULL,
        18446744073709550009ULL, 18446744073709549951ULL, 18446744073709549861ULL,
        18446744073709549817ULL, 18446744073709549811ULL, 18446744073709549777ULL,
        18446744073709549757ULL, 18446744073709549733ULL, 18446744073709549667ULL,
        18446744073709549621ULL, 18446744073709549613ULL, 18446744073709549583ULL,
        18446744073709549571ULL, 18446744073709549519ULL, 18446744073709549483ULL,
        18446744073709549441ULL, 18446744073709549363ULL, 18446744073709549331ULL,
        18446744073709549327ULL, 18446744073709549307ULL, 18446744073709549237ULL,
        18446744073709549153ULL, 18446744073709549123ULL, 18446744073709549067ULL,
        18446744073709549061ULL, 18446744073709549019ULL, 18446744073709548983ULL,
        18446744073709548899ULL, 18446744073709548887ULL, 18446744073709548859ULL,
        18446744073709548847ULL, 18446744073709548809ULL, 18446744073709548703ULL,
        18446744073709548599ULL, 18446744073709548587ULL, 18446744073709548557ULL,
        18446744073709548511ULL, 18446744073709548503ULL, 18446744073709548497ULL,
        18446744073709548481ULL, 18446744073709548397ULL, 18446744073709548391ULL,
        18446744073709548379ULL, 18446744073709548353ULL, 18446744073709548349ULL,
        18446744073709548287ULL, 18446744073709548271ULL, 18446744073709548239ULL,
        18446744073709548193ULL, 18446744073709548119ULL, 18446744073709548073ULL,
        18446744073709548053ULL, 18446744073709547821ULL, 18446744073709547797ULL,
        18446744073709547777ULL, 18446744073709547731ULL, 18446744073709547707ULL,
        18446744073709547669ULL, 18446744073709547657ULL, 18446744073709547537ULL,
        18446744073709547521ULL, 18446744073709547489ULL, 18446744073709547473ULL,
        18446744073709547471ULL, 18446744073709547371ULL, 18446744073709547357ULL,
        18446744073709547317ULL, 18446744073709547303ULL, 18446744073709547117ULL,
        18446744073709547087ULL, 18446744073709547003ULL, 18446744073709546897ULL,
        18446744073709546879ULL, 18446744073709546873ULL, 18446744073709546841ULL,
        18446744073709546739ULL, 18446744073709546729ULL, 18446744073709546657ULL,
        18446744073709546643ULL, 18446744073709546601ULL, 18446744073709546561ULL,
        18446744073709546541ULL, 18446744073709546493ULL, 18446744073709546429ULL,
        18446744073709546409ULL, 18446744073709546391ULL, 18446744073709546363ULL,
        18446744073709546337ULL, 18446744073709546333ULL, 18446744073709546289ULL,
        18446744073709546271ULL, 18446744073709546253ULL, 18446744073709546247ULL,
        18446744073709546093ULL, 18446744073709546079ULL, 18446744073709546027ULL,
        18446744073709545953ULL, 18446744073709545911ULL, 18446744073709545871ULL,
        18446744073709545817ULL, 18446744073709545809ULL, 18446744073709545779ULL,
        18446744073709545743ULL, 18446744073709545697ULL, 18446744073709545689ULL,
        18446744073709545677ULL, 18446744073709545673ULL, 18446744073709545661ULL,
        18446744073709545577ULL, 18446744073709545533ULL, 18446744073709545421ULL,
        18446744073709545233ULL, 18446744073709545229ULL, 18446744073709545169ULL,
        18446744073709545109ULL, 18446744073709544947ULL, 18446744073709544941ULL,
        18446744073709544839ULL, 18446744073709544717ULL, 18446744073709544699ULL,
        18446744073709544633ULL, 18446744073709544627ULL, 18446744073709544623ULL,
        18446744073709544591ULL, 18446744073709544581ULL, 18446744073709544573ULL,
        18446744073709544539ULL, 18446744073709544449ULL, 18446744073709544399ULL,
        18446744073709544279ULL, 18446744073709544269ULL, 18446744073709544221ULL,
        18446744073709544039ULL, 18446744073709544003ULL, 18446744073709543937ULL,
        18446744073709543919ULL, 18446744073709543913ULL, 18446744073709543901ULL,
        18446744073709543807ULL, 18446744073709543751ULL, 18446744073709543699ULL,
        18446744073709543639ULL, 18446744073709543573ULL, 18446744073709543463ULL,
        18446744073709543309ULL, 18446744073709543297ULL, 18446744073709543259ULL,
        18446744073709543223ULL, 18446744073709543187ULL, 18446744073709543159ULL,
        18446744073709543127ULL, 18446744073709543117ULL, 18446744073709543069ULL,
        18446744073709543027ULL, 18446744073709542991ULL, 18446744073709542989ULL,
        18446744073709542959ULL, 18446744073709542953ULL, 18446744073709542937ULL,
        18446744073709542881ULL, 18446744073709542869ULL, 18446744073709542853ULL,
        18446744073709542793ULL, 18446744073709542751ULL, 18446744073709542719ULL,
        18446744073709542713ULL, 18446744073709542629ULL, 18446744073709542583ULL,
        18446744073709542553ULL, 18446744073709542527ULL, 18446744073709542499ULL,
        18446744073709542467ULL, 18446744073709542463ULL, 18446744073709542443ULL,
        18446744073709542259ULL, 18446744073709541893ULL, 18446744073709541851ULL,
        18446744073709541813ULL, 18446744073709541783ULL, 18446744073709541753ULL,
        18446744073709541747ULL, 18446744073709541621ULL, 18446744073709541539ULL,
        18446744073709541519ULL, 18446744073709541489ULL, 18446744073709541459ULL,
        18446744073709541411ULL, 18446744073709541257ULL, 18446744073709541209ULL,
        18446744073709541203ULL, 18446744073709541171ULL, 18446744073709541119ULL,
        18446744073709541113ULL, 18446744073709541069ULL, 18446744073709540993ULL,
        18446744073709540951ULL, 18446744073709540913ULL, 18446744073709540907ULL,
        18446744073709540793ULL, 18446744073709540753ULL, 18446744073709540723ULL,
        18446744073709540709ULL, 18446744073709540649ULL, 18446744073709540469ULL,
        18446744073709540451ULL, 18446744073709540441ULL, 18446744073709540423ULL,
        18446744073709540403ULL, 18446744073709540357ULL, 18446744073709540291ULL,
        18446744073709540279ULL, 18446744073709540247ULL, 18446744073709540207ULL,
        18446744073709540201ULL, 18446744073709540093ULL, 18446744073709540063ULL,
        18446744073709540049ULL, 18446744073709540013ULL, 18446744073709539937ULL,
        18446744073709539871ULL, 18446744073709539839ULL, 18446744073709539689ULL,
        18446744073709539683ULL, 18446744073709539611ULL, 18446744073709539593ULL,
        18446744073709539551ULL, 18446744073709539503ULL, 18446744073709539421ULL,
        18446744073709539403ULL, 18446744073709539361ULL, 18446744073709539337ULL,
        18446744073709539229ULL, 18446744073709539127ULL, 18446744073709539109ULL,
        18446744073709539031ULL, 18446744073709539017ULL, 18446744073709539011ULL,
        18446744073709538941ULL, 18446744073709538893ULL, 18446744073709538819ULL,
        18446744073709538773ULL, 18446744073709538747ULL, 18446744073709538723ULL,
        18446744073709538677ULL, 18446744073709538621ULL, 18446744073709538567ULL,
        18446744073709538501ULL, 18446744073709538459ULL, 18446744073709538449ULL,
        18446744073709538443ULL, 18446744073709538437ULL, 18446744073709538393ULL,
        18446744073709538347ULL, 18446744073709538317ULL, 18446744073709538273ULL,
        18446744073709538183ULL, 18446744073709538179ULL, 18446744073709538123ULL,
        18446744073709538101ULL, 18446744073709538023ULL, 18446744073709537909ULL,
        18446744073709537871ULL, 18446744073709537853ULL, 18446744073709537849ULL,
        18446744073709537841ULL, 18446744073709537837ULL, 18446744073709537823ULL,
        18446744073709537793ULL, 18446744073709537763ULL, 18446744073709537723ULL,
        18446744073709537673ULL, 18446744073709537633ULL, 18446744073709537589ULL,
        18446744073709537499ULL, 18446744073709537457ULL, 18446744073709537447ULL,
        18446744073709537409ULL, 18446744073709537331ULL, 18446744073709537253ULL,
        18446744073709537241ULL, 18446744073709537231ULL, 18446744073709537219ULL,
        18446744073709537153ULL, 18446744073709537129ULL, 18446744073709537111ULL,
        18446744073709537109ULL, 18446744073709537043ULL, 18446744073709536997ULL,
        18446744073709536967ULL, 18446744073709536863ULL, 18446744073709536803ULL,
        18446744073709536727ULL, 18446744073709536719ULL, 18446744073709536707ULL,
        18446744073709536631ULL, 18446744073709536577ULL, 18446744073709536509ULL,
        18446744073709536491ULL, 18446744073709536469ULL, 18446744073709536463ULL,
        18446744073709536427ULL, 18446744073709536401ULL, 18446744073709536329ULL,
        18446744073709536259ULL, 18446744073709536191ULL, 18446744073709536161ULL,
        18446744073709536157ULL, 18446744073709536073ULL, 18446744073709536071ULL,
        18446744073709535783ULL, 18446744073709535777ULL, 18446744073709535741ULL,
        18446744073709535711ULL, 18446744073709535621ULL, 18446744073709535603ULL,
        18446744073709535587ULL, 18446744073709535543ULL, 18446744073709535531ULL,
        18446744073709535473ULL, 18446744073709535471ULL, 18446744073709535461ULL,
        18446744073709535417ULL, 18446744073709535399ULL, 18446744073709535359ULL,
        18446744073709535267ULL, 18446744073709535239ULL, 18446744073709535237ULL,
        18446744073709535113ULL, 18446744073709535041ULL, 18446744073709535039ULL,
        18446744073709534987ULL, 18446744073709534963ULL, 18446744073709534951ULL,
        18446744073709534937ULL, 18446744073709534883ULL, 18446744073709534837ULL,
        18446744073709534823ULL, 18446744073709534811ULL, 18446744073709534787ULL,
        18446744073709534753ULL, 18446744073709534673ULL, 18446744073709534589ULL,
        18446744073709534573ULL, 18446744073709534529ULL, 18446744073709534441ULL,
        18446744073709534439ULL, 18446744073709534403ULL, 18446744073709534393ULL,
        18446744073709534391ULL, 18446744073709534301ULL, 18446744073709534273ULL,
        18446744073709534097ULL, 18446744073709534091ULL, 18446744073709534087ULL,
        18446744073709533991ULL, 18446744073709533941ULL, 18446744073709533917ULL,
        18446744073709533913ULL, 18446744073709533851ULL, 18446744073709533797ULL,
        18446744073709533719ULL, 18446744073709533679ULL, 18446744073709533607ULL,
        18446744073709533599ULL, 18446744073709533521ULL, 18446744073709533497ULL,
        18446744073709533469ULL, 18446744073709533349ULL, 18446744073709533277ULL,
        18446744073709533259ULL, 18446744073709533247ULL, 18446744073709533173ULL,
        18446744073709533163ULL, 18446744073709533133ULL, 18446744073709533103ULL,
        18446744073709533097ULL, 18446744073709533053ULL, 18446744073709532891ULL,
        18446744073709532837ULL, 18446744073709532761ULL, 18446744073709532753ULL,
        18446744073709532747ULL, 18446744073709532683ULL, 18446744073709532467ULL,
        18446744073709532443ULL, 18446744073709532393ULL, 18446744073709532297ULL,
        18446744073709532281ULL, 18446744073709532279ULL, 18446744073709532261ULL,
        18446744073709532173ULL, 18446744073709532159ULL, 18446744073709532153ULL,
        18446744073709532117ULL, 18446744073709531919ULL, 18446744073709531913ULL,
        18446744073709531907ULL, 18446744073709531873ULL, 18446744073709531823ULL,
        18446744073709531781ULL, 18446744073709531777ULL, 18446744073709531771ULL,
        18446744073709531753ULL, 18446744073709531751ULL, 18446744073709531717ULL,
        18446744073709531703ULL, 18446744073709531681ULL, 18446744073709531627ULL,
        18446744073709531621ULL, 18446744073709531607ULL, 18446744073709531571ULL,
        18446744073709531549ULL, 18446744073709531529ULL, 18446744073709531507ULL,
        18446744073709531493ULL, 18446744073709531343ULL, 18446744073709531313ULL,
        18446744073709531201ULL, 18446744073709531189ULL, 18446744073709531123ULL,
        18446744073709531093ULL, 18446744073709530947ULL, 18446744073709530941ULL,
        18446744073709530919ULL, 18446744073709530899ULL, 18446744073709530823ULL,
        18446744073709530713ULL, 18446744073709530653ULL, 18446744073709530599ULL,
        18446744073709530587ULL, 18446744073709530563ULL, 18446744073709530539ULL,
        18446744073709530511ULL, 18446744073709530461ULL, 18446744073709530431ULL,
        18446744073709530317ULL, 18446744073709530287ULL, 18446744073709530259ULL,
        18446744073709530211ULL, 18446744073709530199ULL, 18446744073709529983ULL,
        18446744073709529953ULL, 18446744073709529887ULL, 18446744073709529881ULL,
        18446744073709529867ULL, 18446744073709529797ULL, 18446744073709529789ULL,
        18446744073709529741ULL, 18446744073709529707ULL, 18446744073709529693ULL,
        18446744073709529573ULL, 18446744073709529531ULL, 18446744073709529503ULL,
        18446744073709529443ULL, 18446744073709529411ULL, 18446744073709529377ULL,
        18446744073709529353ULL, 18446744073709529119ULL, 18446744073709529089ULL,
        18446744073709529033ULL, 18446744073709528981ULL, 18446744073709528961ULL,
        18446744073709528883ULL, 18446744073709528781ULL, 18446744073709528747ULL,
        18446744073709528669ULL, 18446744073709528637ULL, 18446744073709528477ULL,
        18446744073709528429ULL, 18446744073709528397ULL, 18446744073709528349ULL,
        18446744073709528303ULL, 18446744073709528289ULL, 18446744073709528259ULL,
        18446744073709528211ULL, 18446744073709528193ULL, 18446744073709528123ULL,
        18446744073709528079ULL, 18446744073709528063ULL, 18446744073709528033ULL,
        18446744073709527991ULL, 18446744073709527913ULL, 18446744073709527859ULL,
        18446744073709527833ULL, 18446744073709527689ULL, 18446744073709527647ULL,
        18446744073709527643ULL, 18446744073709527623ULL, 18446744073709527557ULL,
        18446744073709527547ULL, 18446744073709527463ULL, 18446744073709527361ULL,
        18446744073709527347ULL, 18446744073709527343ULL, 18446744073709527311ULL,
        18446744073709527293ULL, 18446744073709527239ULL, 18446744073709527229ULL,
        18446744073709527209ULL, 18446744073709527193ULL, 18446744073709527187ULL,
        18446744073709527181ULL, 18446744073709527179ULL, 18446744073709527007ULL,
        18446744073709527001ULL, 18446744073709526909ULL, 18446744073709526821ULL,
        18446744073709526789ULL, 18446744073709526749ULL, 18446744073709526741ULL,
        18446744073709526677ULL, 18446744073709526567ULL, 18446744073709526423ULL,
        18446744073709526369ULL, 18446744073709526357ULL, 18446744073709526299ULL,
        18446744073709526293ULL, 18446744073709526233ULL, 18446744073709526219ULL,
        18446744073709526213ULL, 18446744073709526191ULL, 18446744073709526173ULL,
        18446744073709526171ULL, 18446744073709526129ULL, 18446744073709525993ULL,
        18446744073709525961ULL, 18446744073709525907ULL, 18446744073709525867ULL,
        18446744073709525859ULL, 18446744073709525853ULL, 18446744073709525837ULL,
        18446744073709525831ULL, 18446744073709525817ULL, 18446744073709525751ULL,
        18446744073709525733ULL, 18446744073709525687ULL, 18446744073709525649ULL,
        18446744073709525513ULL, 18446744073709525507ULL, 18446744073709525489ULL,
        18446744073709525411ULL, 18446744073709525391ULL, 18446744073709525267ULL,
        18446744073709525247ULL, 18446744073709525121ULL, 18446744073709525099ULL,
        18446744073709525097ULL, 18446744073709525039ULL, 18446744073709524997ULL,
        18446744073709524983ULL, 18446744073709524929ULL, 18446744073709524919ULL,
        18446744073709524913ULL, 18446744073709524901ULL, 18446744073709524871ULL,
        18446744073709524791ULL, 18446744073709524787ULL, 18446744073709524773ULL,
        18446744073709524691ULL, 18446744073709524673ULL, 18446744073709524607ULL,
        18446744073709524451ULL, 18446744073709524431ULL, 18446744073709524371ULL,
        18446744073709524341ULL, 18446744073709524323ULL, 18446744073709524281ULL,
        18446744073709524203ULL, 18446744073709524169ULL, 18446744073709524149ULL,
        18446744073709524077ULL, 18446744073709524037ULL, 18446744073709523953ULL,
        18446744073709523851ULL, 18446744073709523809ULL, 18446744073709523791ULL,
        18446744073709523777ULL, 18446744073709523771ULL, 18446744073709523623ULL,
        18446744073709523557ULL, 18446744073709523437ULL, 18446744073709523393ULL,
        18446744073709523387ULL, 18446744073709523381ULL, 18446744073709523323ULL,
        18446744073709523303ULL, 18446744073709523237ULL, 18446744073709523171ULL,
        18446744073709523153ULL, 18446744073709523149ULL, 18446744073709523059ULL,
        18446744073709522957ULL, 18446744073709522931ULL, 18446744073709522903ULL,
        18446744073709522897ULL, 18446744073709522877ULL, 18446744073709522867ULL,
        18446744073709522849ULL, 18446744073709522829ULL, 18446744073709522723ULL,
        18446744073709522523ULL, 18446744073709522481ULL, 18446744073709522393ULL,
        18446744073709522369ULL, 18446744073709522349ULL, 18446744073709522327ULL,
        18446744073709522271ULL, 18446744073709522223ULL, 18446744073709522217ULL,
        18446744073709522199ULL, 18446744073709522183ULL, 18446744073709522097ULL,
        18446744073709522091ULL, 18446744073709522063ULL, 18446744073709521943ULL,
        18446744073709521919ULL, 18446744073709521881ULL, 18446744073709521859ULL,
        18446744073709521833ULL, 18446744073709521781ULL, 18446744073709521659ULL,
        18446744073709521643ULL, 18446744073709521601ULL, 18446744073709521587ULL,
        18446744073709521571ULL, 18446744073709521539ULL, 18446744073709521509ULL,
        18446744073709521487ULL, 18446744073709521473ULL, 18446744073709521419ULL,
        18446744073709521407ULL, 18446744073709521379ULL, 18446744073709521377ULL,
        18446744073709521247ULL, 18446744073709521211ULL, 18446744073709521133ULL,
        18446744073709521107ULL, 18446744073709520929ULL, 18446744073709520927ULL,
        18446744073709520831ULL, 18446744073709520729ULL, 18446744073709520717ULL,
        18446744073709520713ULL, 18446744073709520711ULL, 18446744073709520663ULL,
        18446744073709520651ULL, 18446744073709520633ULL, 18446744073709520599ULL,
        18446744073709520593ULL, 18446744073709520587ULL, 18446744073709520549ULL,
        18446744073709520509ULL, 18446744073709520479ULL, 18446744073709520333ULL,
        18446744073709520291ULL, 18446744073709520147ULL, 18446744073709520143ULL,
        18446744073709520137ULL, 18446744073709519999ULL, 18446744073709519993ULL,
        18446744073709519903ULL, 18446744073709519891ULL, 18446744073709519879ULL,
        18446744073709519873ULL, 18446744073709519829ULL, 18446744073709519783ULL,
        18446744073709519759ULL, 18446744073709519699ULL, 18446744073709519643ULL,
        18446744073709519637ULL, 18446744073709519619ULL, 18446744073709519597ULL,
        18446744073709519507ULL, 18446744073709519427ULL, 18446744073709519409ULL,
        18446744073709519313ULL, 18446744073709519189ULL, 18446744073709519133ULL,
        18446744073709519027ULL, 18446744073709518943ULL, 18446744073709518937ULL,
        18446744073709518913ULL, 18446744073709518899ULL, 18446744073709518887ULL,
        18446744073709518829ULL, 18446744073709518823ULL, 18446744073709518773ULL,
        18446744073709518757ULL, 18446744073709518727ULL, 18446744073709518713ULL,
        18446744073709518683ULL, 18446744073709518643ULL, 18446744073709518527ULL,
        18446744073709518493ULL, 18446744073709518443ULL, 18446744073709518433ULL,
        18446744073709518401ULL, 18446744073709518373ULL, 18446744073709518241ULL,
        18446744073709518139ULL, 18446744073709518059ULL, 18446744073709518001ULL,
        18446744073709517977ULL, 18446744073709517963ULL, 18446744073709517947ULL,
        18446744073709517837ULL, 18446744073709517809ULL, 18446744073709517801ULL,
        18446744073709517771ULL, 18446744073709517677ULL, 18446744073709517641ULL,
        18446744073709517591ULL, 18446744073709517521ULL, 18446744073709517471ULL,
        18446744073709517387ULL, 18446744073709517341ULL, 18446744073709517287ULL,
        18446744073709517239ULL, 18446744073709517213ULL, 18446744073709517191ULL,
        18446744073709517147ULL, 18446744073709517143ULL, 18446744073709517141ULL,
        18446744073709517117ULL, 18446744073709517011ULL, 18446744073709516921ULL,
        18446744073709516889ULL, 18446744073709516841ULL, 18446744073709516597ULL,
        18446744073709516583ULL, 18446744073709516549ULL, 18446744073709516547ULL,
        18446744073709516517ULL, 18446744073709516429ULL, 18446744073709516423ULL,
        18446744073709516399ULL, 18446744073709516387ULL, 18446744073709516363ULL,
        18446744073709516273ULL, 18446744073709516133ULL, 18446744073709516021ULL,
        18446744073709516013ULL, 18446744073709515959ULL, 18446744073709515913ULL,
        18446744073709515769ULL, 18446744073709515757ULL, 18446744073709515653ULL,
        18446744073709515631ULL, 18446744073709515559ULL, 18446744073709515533ULL,
        18446744073709515527ULL, 18446744073709515497ULL, 18446744073709515469ULL,
        18446744073709515457ULL, 18446744073709515449ULL, 18446744073709515433ULL,
        18446744073709515409ULL, 18446744073709515329ULL, 18446744073709515301ULL,
    };

#if CONFIG_HAS_AT_LEAST_CXX_20
    static_assert(std::is_sorted(primes.begin(), primes.end(), std::greater<>{}));
#endif
    static_assert(primes.front() < primes.front() + 2);
    for (uint64_t n = primes.back(); n <= primes.front(); n += 2) {
        assert(is_prime_bpsw(n) ==
               std::binary_search(primes.begin(), primes.end(), n, std::greater<>{}));
    }
}

void TestPrimesFromFile() {
    log_tests_started();

    FilePtr fin("u64-primes.txt", "r");
    for (uint64_t prev_prime = std::numeric_limits<uint64_t>::max(), p = 0;; prev_prime = p) {
        // NOLINTNEXTLINE(cert-err34-c)
        switch (std::fscanf(fin, "%" PRIu64, &p)) {
            case 1:
                assert(prev_prime > p);
                assert(is_prime_bpsw(p));
                break;
            case std::char_traits<char>::eof():
                return;
            default:
                perror("std::fscanf");
                throw std::runtime_error("std::fscanf");
        }
    }
}

#if defined(HAS_GMP_DURING_TESTING)

void TestRandomPrimesGMP() noexcept {
    log_tests_started();

    constexpr size_t kTotalTests = 1U << 26U;

    const auto rnd_seed = static_cast<std::uint_fast64_t>(std::random_device{}()) ^
                          static_cast<std::uint_fast64_t>(std::time(nullptr));
    std::mt19937_64 rnd(rnd_seed);
    const int ret = std::fprintf(stderr, "Random seed = %" PRIuFAST64 "\n", rnd_seed);
    assert(ret > 0);

    // NOLINTBEGIN(cppcoreguidelines-pro-bounds-array-to-pointer-decay, hicpp-no-array-decay)

    mpz_t n_gmp;
    mpz_init(n_gmp);
    // NOLINTNEXTLINE(google-runtime-int)
    using GmpUi = unsigned long int;
    static_assert(sizeof(mp_limb_t) >= sizeof(uint64_t) || sizeof(GmpUi) == sizeof(uint32_t));
    if constexpr (sizeof(mp_limb_t) >= sizeof(uint64_t)) {
        mp_limb_t* const n_gmp_array = mpz_limbs_write(n_gmp, 1);
        for (size_t test = kTotalTests; test != 0; test--) {
            const uint64_t n = rnd() | 1U;
            assert(n % 2 == 1);

            n_gmp_array[0] = n;
            mpz_limbs_finish(n_gmp, 1);

            const bool is_prime = mpz_probab_prime_p(n_gmp, 30) != 0;
            assert(is_prime_bpsw(n) == is_prime);
        }
    } else if constexpr (sizeof(GmpUi) == sizeof(uint32_t)) {
        for (size_t test = kTotalTests; test != 0; test--) {
            const uint64_t n = rnd() | 1U;
            assert(n % 2 == 1);
            mpz_set_ui(n_gmp, static_cast<GmpUi>(n >> 32U));
            mpz_mul_2exp(n_gmp, n_gmp, 32);
            mpz_add_ui(n_gmp, n_gmp, static_cast<GmpUi>(n & 0xFFFFFFFFU));
            const bool is_prime = mpz_probab_prime_p(n_gmp, 30) != 0;
            assert(is_prime_bpsw(n) == is_prime);
        }
    }

    mpz_clear(n_gmp);

    // NOLINTEND(cppcoreguidelines-pro-bounds-array-to-pointer-decay, hicpp-no-array-decay)
}

#endif

void TestMersennePrimeNumbers() noexcept {
    for (const uint32_t n : {0U, 1U, 2U, 5U, 11U, 13U, 17U, 19U, 23U, 29U}) {
        assert(!math_functions::is_mersenne_prime(std::uint64_t{n}));
        assert(!math_functions::is_mersenne_prime(uint128_t{n}));
    }
    for (const uint128_t n : {
             uint128_t{3},
             uint128_t{7},
             uint128_t{31},
             uint128_t{127},
             uint128_t{8191},
             uint128_t{131071},
             uint128_t{524287},
             uint128_t{2147483647},
             uint128_t{2} * 1'000'000'000'000'000'000ULL + 305'843'009'213'693'951ULL,
             uint128_t{618970019} * 1'000'000'000'000'000'000ULL + 642'690'137'449'562'111ULL,
             uint128_t{162259276829213} * 1'000'000'000'000'000'000ULL + 363'391'578'010'288'127ULL,
             (uint128_t{1} << 127U) - 1,
         }) {
        if (n <= std::numeric_limits<std::uint64_t>::max()) {
            assert(!math_functions::is_mersenne_prime(static_cast<std::uint64_t>(n - 2)));
            assert(!math_functions::is_mersenne_prime(static_cast<std::uint64_t>(n - 1)));
            assert(math_functions::is_mersenne_prime(static_cast<std::uint64_t>(n)));
            assert(!math_functions::is_mersenne_prime(static_cast<std::uint64_t>(n + 1)));
            assert(!math_functions::is_mersenne_prime(static_cast<std::uint64_t>(n + 2)));
            assert(math_functions::is_prime_bpsw(static_cast<std::uint64_t>(n)));
        }
        assert(!math_functions::is_mersenne_prime(n - 2));
        assert(!math_functions::is_mersenne_prime(n - 1));
        assert(math_functions::is_mersenne_prime(n));
        assert(!math_functions::is_mersenne_prime(n + 1));
        assert(!math_functions::is_mersenne_prime(n + 2));
    }
}

}  // namespace

// clang-format off
// NOLINTEND(cert-dcl03-c, misc-static-assert, hicpp-static-assert, cppcoreguidelines-avoid-magic-numbers)
// clang-format on

// NOLINTNEXTLINE(bugprone-exception-escape)
int main() {
    TestSmallPrimes();
    TestMidPrimes();
    TestLargestU64Primes();
    TestPrimesFromFile();
#if defined(HAS_GMP_DURING_TESTING)
    TestRandomPrimesGMP();
#endif
    TestMersennePrimeNumbers();
}
