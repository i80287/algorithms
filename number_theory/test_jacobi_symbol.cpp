#include <cassert>
#include "jacobi_symbol.hpp"

static const int32_t jcb[30][30] = {
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    {1, 0, -1, 0,  -1, 0,  1, 0, 1, 0, -1, 0,  -1, 0,  1,
     0, 1, 0,  -1, 0,  -1, 0, 1, 0, 1, 0,  -1, 0,  -1, 0},
    {1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0,
     1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
     0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {1, -1, -1, 1, 0, 1, -1, -1, 1, 0, 1, -1, -1, 1, 0,
     1, -1, -1, 1, 0, 1, -1, -1, 1, 0, 1, -1, -1, 1, 0},
    {1, 0,  0, 0,  1, 0, 1, 0,  0, 0, 1, 0, -1, 0, 0,
     0, -1, 0, -1, 0, 0, 0, -1, 0, 1, 0, 0, 0,  1, 0},
    {1, 1,  -1, 1,  -1, -1, 0, 1, 1,  -1, 1,  -1, -1, 0, 1,
     1, -1, 1,  -1, -1, 0,  1, 1, -1, 1,  -1, -1, 0,  1, 1},
    {1, 0, -1, 0,  -1, 0,  1, 0, 1, 0, -1, 0,  -1, 0,  1,
     0, 1, 0,  -1, 0,  -1, 0, 1, 0, 1, 0,  -1, 0,  -1, 0},
    {1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,
     1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0},
    {1, 0,  1, 0,  0, 0,  -1, 0,  1, 0, -1, 0, 1, 0,  0,
     0, -1, 0, -1, 0, -1, 0,  -1, 0, 0, 0,  1, 0, -1, 0},
    {1, -1, 1,  1,  1, -1, -1, -1, 1,  -1, 0, 1, -1, 1,  1,
     1, -1, -1, -1, 1, -1, 0,  1,  -1, 1,  1, 1, -1, -1, -1},
    {1, 0,  0, 0, -1, 0, 1, 0,  0, 0, -1, 0, 1, 0,  0,
     0, -1, 0, 1, 0,  0, 0, -1, 0, 1, 0,  0, 0, -1, 0},
    {1, -1, 1,  1,  -1, -1, -1, -1, 1,  1, -1, 1, 0,  1, -1,
     1, 1,  -1, -1, -1, -1, 1,  1,  -1, 1, 0,  1, -1, 1, 1},
    {1, 0,  1, 0, 1, 0, 0, 0, 1, 0, -1, 0, 1, 0,  1,
     0, -1, 0, 1, 0, 0, 0, 1, 0, 1, 0,  1, 0, -1, 0},
    {1, 1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, -1, 0,
     1, 1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, -1, 0},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
     0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {1, 1, -1, 1, -1, -1, -1, 1,  1,  -1, -1, -1, 1,  -1, 1,
     1, 0, 1,  1, -1, 1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1},
    {1, 0, 0, 0,  -1, 0, 1, 0, 0, 0, -1, 0, -1, 0,  0,
     0, 1, 0, -1, 0,  0, 0, 1, 0, 1, 0,  0, 0,  -1, 0},
    {1, -1, -1, 1, 1, 1,  1,  -1, 1, -1, 1, -1, -1, -1, -1,
     1, 1,  -1, 0, 1, -1, -1, 1,  1, 1,  1, -1, 1,  -1, 1},
    {1, 0,  -1, 0, 0, 0, -1, 0,  1, 0, 1, 0,  -1, 0, 0,
     0, -1, 0,  1, 0, 1, 0,  -1, 0, 0, 0, -1, 0,  1, 0},
    {1, -1, 0, 1,  1, 0, 0, -1, 0, -1, -1, 0, -1, 0,  0,
     1, 1,  0, -1, 1, 0, 1, -1, 0, 1,  1,  0, 0,  -1, 0},
    {1, 0,  -1, 0, -1, 0, -1, 0, 1, 0, 0, 0,  1, 0, 1,
     0, -1, 0,  1, 0,  1, 0,  1, 0, 1, 0, -1, 0, 1, 0},
    {1, 1,  1, 1,  -1, 1,  -1, 1, 1, -1, -1, 1, 1,  -1, -1,
     1, -1, 1, -1, -1, -1, -1, 0, 1, 1,  1,  1, -1, 1,  -1},
    {1, 0,  0, 0,  1, 0, 1, 0,  0, 0, 1, 0, -1, 0, 0,
     0, -1, 0, -1, 0, 0, 0, -1, 0, 1, 0, 0, 0,  1, 0},
    {1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
     1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0},
    {1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 1, 0,  0, 0,  -1,
     0, 1, 0,  1, 0, 1, 0,  1, 0, 1, 0, -1, 0, -1, 0},
    {1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0,
     1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0},
    {1, 0,  -1, 0,  -1, 0, 0, 0, 1, 0, 1, 0,  -1, 0, 1,
     0, -1, 0,  -1, 0,  0, 0, 1, 0, 1, 0, -1, 0,  1, 0},
    {1, -1, -1, 1,  1, 1,  1, -1, 1, -1, -1, -1, 1, -1, -1,
     1, -1, -1, -1, 1, -1, 1, 1,  1, 1,  -1, -1, 1, 0,  1},
    {1, 0, 0, 0,  0, 0, -1, 0, 0, 0, 1, 0, 1, 0, 0,
     0, 1, 0, -1, 0, 0, 0,  1, 0, 0, 0, 0, 0, 1, 0},
};

static const uint32_t primes[30] = {
    3,  5,  7,  11, 13, 17, 19, 23, 29, 31,  37,  41,  43,  47,  53,
    59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127};
static const int32_t lgnr[30][30] = {
    {1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0,
     1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0},
    {1, -1, -1, 1, 0, 1, -1, -1, 1, 0, 1, -1, -1, 1, 0,
     1, -1, -1, 1, 0, 1, -1, -1, 1, 0, 1, -1, -1, 1, 0},
    {1, 1,  -1, 1,  -1, -1, 0, 1, 1,  -1, 1,  -1, -1, 0, 1,
     1, -1, 1,  -1, -1, 0,  1, 1, -1, 1,  -1, -1, 0,  1, 1},
    {1, -1, 1,  1,  1, -1, -1, -1, 1,  -1, 0, 1, -1, 1,  1,
     1, -1, -1, -1, 1, -1, 0,  1,  -1, 1,  1, 1, -1, -1, -1},
    {1, -1, 1,  1,  -1, -1, -1, -1, 1,  1, -1, 1, 0,  1, -1,
     1, 1,  -1, -1, -1, -1, 1,  1,  -1, 1, 0,  1, -1, 1, 1},
    {1, 1, -1, 1, -1, -1, -1, 1,  1,  -1, -1, -1, 1,  -1, 1,
     1, 0, 1,  1, -1, 1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1},
    {1, -1, -1, 1, 1, 1,  1,  -1, 1, -1, 1, -1, -1, -1, -1,
     1, 1,  -1, 0, 1, -1, -1, 1,  1, 1,  1, -1, 1,  -1, 1},
    {1, 1,  1, 1,  -1, 1,  -1, 1, 1, -1, -1, 1, 1,  -1, -1,
     1, -1, 1, -1, -1, -1, -1, 0, 1, 1,  1,  1, -1, 1,  -1},
    {1, -1, -1, 1,  1, 1,  1, -1, 1, -1, -1, -1, 1, -1, -1,
     1, -1, -1, -1, 1, -1, 1, 1,  1, 1,  -1, -1, 1, 0,  1},
    {1, 1,  -1, 1, 1, -1, 1,  1,  1,  1, -1, -1, -1, 1,  -1,
     1, -1, 1,  1, 1, -1, -1, -1, -1, 1, -1, -1, 1,  -1, -1},
    {1, -1, 1,  1,  -1, -1, 1,  -1, 1,  1, 1, 1, -1, -1, -1,
     1, -1, -1, -1, -1, 1,  -1, -1, -1, 1, 1, 1, 1,  -1, 1},
    {1, 1,  -1, 1,  1, -1, -1, 1, 1,  1, -1, -1, -1, -1, -1,
     1, -1, 1,  -1, 1, 1,  -1, 1, -1, 1, -1, -1, -1, -1, -1},
    {1, -1, -1, 1,  -1, 1, -1, -1, 1, 1, 1,  -1, 1,  1,  1,
     1, 1,  -1, -1, -1, 1, -1, 1,  1, 1, -1, -1, -1, -1, -1},
    {1, 1, 1, 1,  -1, 1, 1,  1,  1, -1, -1, 1, -1, 1,  -1,
     1, 1, 1, -1, -1, 1, -1, -1, 1, 1,  -1, 1, 1,  -1, -1},
    {1, -1, -1, 1,  -1, 1,  1,  -1, 1, 1, 1,  -1, 1, -1, 1,
     1, 1,  -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1,  -1},
    {1, -1, 1,  1, 1, -1, 1, -1, 1,  -1, -1, 1, -1, -1, 1,
     1, 1,  -1, 1, 1, 1,  1, -1, -1, 1,  1,  1, 1,  1,  -1},
    {1, -1, 1,  1, 1, -1, -1, -1, 1,  -1, -1, 1, 1,  1,  1,
     1, -1, -1, 1, 1, -1, 1,  -1, -1, 1,  -1, 1, -1, -1, -1},
    {1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1,
     1, 1,  -1, 1, -1, 1, 1,  1,  1, 1, 1,  -1, -1, 1, -1},
    {1, 1,  1, 1, 1, 1,  -1, 1,  1, 1, -1, 1, -1, -1, 1,
     1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1,  1},
    {1, 1,  1, 1, -1, 1,  -1, 1, 1, -1, -1, 1, -1, -1, -1,
     1, -1, 1, 1, -1, -1, -1, 1, 1, 1,  -1, 1, -1, -1, -1},
    {1, 1,  -1, 1, 1, -1, -1, 1, 1,  1, 1, -1, 1,  -1, -1,
     1, -1, 1,  1, 1, 1,  1,  1, -1, 1, 1, -1, -1, -1, -1},
    {1, -1, 1,  1,  -1, -1, 1,  -1, 1,  1, 1, 1, -1, -1, -1,
     1, 1,  -1, -1, -1, 1,  -1, 1,  -1, 1, 1, 1, 1,  1,  1},
    {1, 1, -1, 1,  1, -1, -1, 1,  1,  1, 1,  -1, -1, -1, -1,
     1, 1, 1,  -1, 1, 1,  1,  -1, -1, 1, -1, -1, -1, -1, -1},
    {1, 1,  1, 1,  -1, 1,  -1, 1,  1, -1, 1,  1, -1, -1, -1,
     1, -1, 1, -1, -1, -1, 1,  -1, 1, 1,  -1, 1, -1, -1, -1},
    {1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1,  1,  -1,
     1, 1,  -1, 1, 1, 1, 1,  1,  1, 1,  -1, -1, -1, -1, 1},
    {1, 1, -1, 1, -1, -1, 1,  1, 1,  -1, -1, -1, 1, 1, 1,
     1, 1, 1,  1, -1, -1, -1, 1, -1, 1,  1,  -1, 1, 1, 1},
    {1, -1, 1,  1, -1, -1, -1, -1, 1,  1, 1,  1, 1,  1, -1,
     1, -1, -1, 1, -1, -1, -1, 1,  -1, 1, -1, 1, -1, 1, 1},
    {1, -1, 1,  1,  1, -1, 1, -1, 1,  -1, -1, 1, -1, -1, 1,
     1, -1, -1, -1, 1, 1,  1, -1, -1, 1,  1,  1, 1,  1,  -1},
    {1, 1,  -1, 1,  -1, -1, 1, 1,  1,  -1, 1, -1, 1, 1,  1,
     1, -1, 1,  -1, -1, -1, 1, -1, -1, 1,  1, -1, 1, -1, 1},
    {1, 1, -1, 1, -1, -1, -1, 1,  1,  -1, 1, -1, 1,  -1, 1,
     1, 1, 1,  1, -1, 1,  1,  -1, -1, 1,  1, -1, -1, -1, 1},
};

int main() {
    for (uint32_t n = 1; n <= 30; n++) {
        for (uint32_t k = 1; k <= 30; k++) {
            int32_t j = jcb[n - 1][k - 1];
            assert(JacobiSymbol(k, n) == j);

            assert(JacobiSymbol(int64_t(k), int64_t(n)) == j);
            assert(JacobiSymbol(uint64_t(k), int64_t(n)) == j);
            assert(JacobiSymbol(int64_t(k), uint64_t(n)) == j);
            assert(JacobiSymbol(uint64_t(k), uint64_t(n)) == j);

            assert(JacobiSymbol(k, -int32_t(n)) == j);
            assert(JacobiSymbol(int64_t(k), int64_t(-int32_t(n))) == j);
            assert(JacobiSymbol(uint64_t(k), int64_t(-int32_t(n))) == j);
        }
    }

    for (int32_t k = -100; k <= 100; k++) {
        const int32_t b = k == 1 || k == -1;
        assert(JacobiSymbol(k, 0) == b);
        assert(JacobiSymbol(k, uint32_t(0)) == b);
        assert(JacobiSymbol(int64_t(k), int64_t(0)) == b);
        assert(JacobiSymbol(int64_t(k), uint64_t(0)) == b);
    }

    for (size_t i = 0; i < 30; i++) {
        uint32_t p = primes[i];
        for (uint32_t a = 1; a <= 30; a++) {
            int32_t l = lgnr[i][a - 1];
            assert(JacobiSymbol(a, p) == l);

            assert(JacobiSymbol(int64_t(a), int64_t(p)) == l);
            assert(JacobiSymbol(uint64_t(a), int64_t(p)) == l);
            assert(JacobiSymbol(int64_t(a), uint64_t(p)) == l);
            assert(JacobiSymbol(uint64_t(a), uint64_t(p)) == l);

            assert(JacobiSymbol(a, -int32_t(p)) == l);
            assert(JacobiSymbol(int64_t(a), int64_t(-int32_t(p))) == l);
            assert(JacobiSymbol(uint64_t(a), int64_t(-int32_t(p))) == l);
        }
    }
}
